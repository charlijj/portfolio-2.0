{"ast":null,"code":"export function headerCanvas() {\n  const canvas = document.getElementById(`header-canvas`);\n  const ctx = canvas.getContext(`2d`);\n  console.log(canvas);\n  console.log(\"hellow\");\n  const audioCtx = new AudioContext();\n  const analyser = audioCtx.createAnalyser();\n  const audio = new Audio(`ext/song.mp3`);\n  const audioSource = audioCtx.createMediaElementSource(audio);\n  audioSource.connect(analyser);\n  analyser.fftSize = 1024;\n  const bufferLen = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLen);\n  function animateFullRainbowBar() {\n    if (audio.paused) {\n      audio.play();\n    }\n    const barWidth = canvas.width / bufferLen;\n    let barHeight;\n    let x = 0;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    analyser.getByteFrequencyData(dataArray);\n    for (let i = 0; i < bufferLen; i++) {\n      barHeight = dataArray[i] * 2;\n      const hue = i * 10;\n      ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n      // let red = 100;\n      // let blue = barHeight + 30;\n      // let green = barHeight + 50;\n\n      border.style.border = `3px solid hsl(` + barHeight + `,100%, 50%)`;\n      // border.style.border = `3px solid rgb(` + red + `, ` + blue + `, ` + green + `)`;\n\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.save();\n      ctx.translate(canvas.width, 0);\n      ctx.scale(-1, 1);\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.restore();\n      x += barWidth + 5;\n      if (x > canvas.width / 2) {\n        x = 0;\n        break;\n      }\n    }\n    requestAnimationFrame(animateFullRainbowBar);\n  }\n  audio.play();\n  animateFullRainbowBar(stop);\n}\n\n// function playVisualizer(play) {\n\n// const audioCtx = new AudioContext();\n// const analyser = audioCtx.createAnalyser();\n// const audio = new Audio(`ext/song.mp3`);\n// const audioSource = audioCtx.createMediaElementSource(audio);\n// audioSource.connect(analyser);\n\n//     let stop;\n\n//     if (play)\n//     {\n//         audio.play();\n//         stop = false;\n//     }\n//     else\n//     {\n//         audio.pause();\n//         stop = true;\n//     }\n\n//     //An unsigned integer, representing the window size of the FFT, given in number of samples. \n//     //A higher value will result in more details in the frequency domain but fewer details in the time domain.\n//     // Must be a power of 2 (up to 2^15)\n// analyser.fftSize = 1024;\n\n//     //Bin count is always half of the fft size and is the number of canvas elements that are to be drawn.\n// const bufferLen = analyser.frequencyBinCount;\n// const dataArray = new Uint8Array(bufferLen);\n\n//     function animateFullRainbowBar() {\n\n//         if (stop)\n//         {\n//             cancelAnimationFrame(animateFullRainbowBar);\n//             window.location.reload();\n//             return;\n//         }\n\n//         const barWidth = canvas.width / bufferLen;\n//         let barHeight;\n//         let x = 0;\n//         ctx.clearRect(0, 0, canvas.width, canvas.height);\n//         analyser.getByteFrequencyData(dataArray);\n\n//         for (let i = 0; i < bufferLen; i++)\n//         {\n//             barHeight = dataArray[i] * 2;\n\n//             const hue = i * 10;\n\n//             ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n//             // let red = 100;\n//             // let blue = barHeight + 30;\n//             // let green = barHeight + 50;\n\n//             border.style.border = `3px solid hsl(` + barHeight + `,100%, 50%)`;\n//             // border.style.border = `3px solid rgb(` + red + `, ` + blue + `, ` + green + `)`;\n\n//             ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n//             ctx.save();\n//             ctx.translate(canvas.width, 0);\n//             ctx.scale(-1, 1);   \n//             ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n//             ctx.restore();\n\n//             x += barWidth + 5;\n\n//             if (x > canvas.width/2)\n//             {\n//                 x = 0;\n//                 break;\n//             }\n//         }\n\n//         requestAnimationFrame(animateFullRainbowBar);\n//     }\n\n//     animateFullRainbowBar(stop);\n\n// }","map":{"version":3,"names":["headerCanvas","canvas","document","getElementById","ctx","getContext","console","log","audioCtx","AudioContext","analyser","createAnalyser","audio","Audio","audioSource","createMediaElementSource","connect","fftSize","bufferLen","frequencyBinCount","dataArray","Uint8Array","animateFullRainbowBar","paused","play","barWidth","width","barHeight","x","clearRect","height","getByteFrequencyData","i","hue","fillStyle","border","style","fillRect","save","translate","scale","restore","requestAnimationFrame","stop"],"sources":["/home/charlijj/Desktop/websites/portfolio_two/portfolio_two_app/src/header_script/header_script.js"],"sourcesContent":["export function headerCanvas()\n{\n    const canvas = document.getElementById(`header-canvas`);\n    const ctx = canvas.getContext(`2d`);\n    console.log(canvas);\n    console.log(\"hellow\");\n\n    const audioCtx = new AudioContext();\n    const analyser = audioCtx.createAnalyser();\n    const audio = new Audio(`ext/song.mp3`);\n    const audioSource = audioCtx.createMediaElementSource(audio);\n    audioSource.connect(analyser);\n\n    analyser.fftSize = 1024;\n\n    const bufferLen = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLen);\n\n    function animateFullRainbowBar() {\n\n        if (audio.paused)\n        {\n            audio.play();\n        }\n\n        const barWidth = canvas.width / bufferLen;\n        let barHeight;\n        let x = 0;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        analyser.getByteFrequencyData(dataArray);\n\n        for (let i = 0; i < bufferLen; i++)\n        {\n            barHeight = dataArray[i] * 2;\n\n            const hue = i * 10;\n            \n            ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n            // let red = 100;\n            // let blue = barHeight + 30;\n            // let green = barHeight + 50;\n\n            border.style.border = `3px solid hsl(` + barHeight + `,100%, 50%)`;\n            // border.style.border = `3px solid rgb(` + red + `, ` + blue + `, ` + green + `)`;\n\n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n            ctx.save();\n            ctx.translate(canvas.width, 0);\n            ctx.scale(-1, 1);   \n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n            ctx.restore();\n\n            x += barWidth + 5;\n\n            if (x > canvas.width/2)\n            {\n                x = 0;\n                break;\n            }\n        }\n        \n        requestAnimationFrame(animateFullRainbowBar);\n    }\n\n    audio.play();\n    animateFullRainbowBar(stop);\n\n}\n\n\n\n// function playVisualizer(play) {\n\n    // const audioCtx = new AudioContext();\n    // const analyser = audioCtx.createAnalyser();\n    // const audio = new Audio(`ext/song.mp3`);\n    // const audioSource = audioCtx.createMediaElementSource(audio);\n    // audioSource.connect(analyser);\n\n//     let stop;\n\n//     if (play)\n//     {\n//         audio.play();\n//         stop = false;\n//     }\n//     else\n//     {\n//         audio.pause();\n//         stop = true;\n//     }\n\n//     //An unsigned integer, representing the window size of the FFT, given in number of samples. \n//     //A higher value will result in more details in the frequency domain but fewer details in the time domain.\n//     // Must be a power of 2 (up to 2^15)\n    // analyser.fftSize = 1024;\n\n//     //Bin count is always half of the fft size and is the number of canvas elements that are to be drawn.\n    // const bufferLen = analyser.frequencyBinCount;\n    // const dataArray = new Uint8Array(bufferLen);\n\n//     function animateFullRainbowBar() {\n\n//         if (stop)\n//         {\n//             cancelAnimationFrame(animateFullRainbowBar);\n//             window.location.reload();\n//             return;\n//         }\n\n//         const barWidth = canvas.width / bufferLen;\n//         let barHeight;\n//         let x = 0;\n//         ctx.clearRect(0, 0, canvas.width, canvas.height);\n//         analyser.getByteFrequencyData(dataArray);\n\n//         for (let i = 0; i < bufferLen; i++)\n//         {\n//             barHeight = dataArray[i] * 2;\n\n//             const hue = i * 10;\n            \n//             ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n//             // let red = 100;\n//             // let blue = barHeight + 30;\n//             // let green = barHeight + 50;\n\n//             border.style.border = `3px solid hsl(` + barHeight + `,100%, 50%)`;\n//             // border.style.border = `3px solid rgb(` + red + `, ` + blue + `, ` + green + `)`;\n\n//             ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n//             ctx.save();\n//             ctx.translate(canvas.width, 0);\n//             ctx.scale(-1, 1);   \n//             ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n//             ctx.restore();\n\n//             x += barWidth + 5;\n\n//             if (x > canvas.width/2)\n//             {\n//                 x = 0;\n//                 break;\n//             }\n//         }\n        \n//         requestAnimationFrame(animateFullRainbowBar);\n//     }\n\n//     animateFullRainbowBar(stop);\n\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}