{"ast":null,"code":"export function headerAnimation() {\n  function animateFullRainbowBar() {\n    const barWidth = 30;\n    let numBars = 40;\n    let barHeight;\n    let x = 0;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    analyser.getByteFrequencyData(dataArray);\n    for (let i = 0; i < numBars; i++) {\n      barHeight = dataArray[i] * 2;\n      const hue = i * 10;\n      ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n      // let red = 100;\n      // let blue = barHeight + 30;\n      // let green = barHeight + 50;\n\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.save();\n      ctx.translate(canvas.width, 0);\n      ctx.scale(-1, 1);\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.restore();\n      x += barWidth + 5;\n      if (x > canvas.width / 2) {\n        x = 0;\n        break;\n      }\n    }\n    requestAnimationFrame(animateFullRainbowBar);\n  }\n  animateFullRainbowBar();\n}\nexport function audioVisualizer() {\n  const canvas = document.getElementById(`header-canvas`);\n  const ctx = canvas.getContext(`2d`);\n  console.log(canvas);\n  console.log(\"hellow\");\n  const audioCtx = new AudioContext();\n  const analyser = audioCtx.createAnalyser();\n  const audio = new Audio(`../ext_song.mp3`);\n  const audioSource = audioCtx.createMediaElementSource(audio);\n  audioSource.connect(analyser);\n  analyser.fftSize = 1024;\n  const bufferLen = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLen);\n  function animateFullRainbowBar() {\n    if (audio.paused) {\n      audio.play();\n    }\n    const barWidth = canvas.width / bufferLen;\n    let barHeight;\n    let x = 0;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    analyser.getByteFrequencyData(dataArray);\n    for (let i = 0; i < bufferLen; i++) {\n      barHeight = dataArray[i] * 2;\n      const hue = i * 10;\n      ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n      // let red = 100;\n      // let blue = barHeight + 30;\n      // let green = barHeight + 50;\n\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.save();\n      ctx.translate(canvas.width, 0);\n      ctx.scale(-1, 1);\n      ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n      ctx.restore();\n      x += barWidth + 5;\n      if (x > canvas.width / 2) {\n        x = 0;\n        break;\n      }\n    }\n    requestAnimationFrame(animateFullRainbowBar);\n  }\n  audio.play();\n  animateFullRainbowBar();\n}","map":{"version":3,"names":["headerAnimation","animateFullRainbowBar","barWidth","numBars","barHeight","x","ctx","clearRect","canvas","width","height","analyser","getByteFrequencyData","dataArray","i","hue","fillStyle","fillRect","save","translate","scale","restore","requestAnimationFrame","audioVisualizer","document","getElementById","getContext","console","log","audioCtx","AudioContext","createAnalyser","audio","Audio","audioSource","createMediaElementSource","connect","fftSize","bufferLen","frequencyBinCount","Uint8Array","paused","play"],"sources":["/home/charlijj/Desktop/websites/portfolio_two/portfolio_two_app/src/section_script/sectionScripts.js"],"sourcesContent":["export function headerAnimation() {\n\n    function animateFullRainbowBar() {\n\n        const barWidth = 30;\n        let numBars = 40;\n        let barHeight;\n        \n        let x = 0;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        analyser.getByteFrequencyData(dataArray);\n\n        for (let i = 0; i < numBars; i++)\n        {\n            barHeight = dataArray[i] * 2;\n\n            const hue = i * 10;\n            \n            ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n            // let red = 100;\n            // let blue = barHeight + 30;\n            // let green = barHeight + 50;\n\n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n            ctx.save();\n            ctx.translate(canvas.width, 0);\n            ctx.scale(-1, 1);   \n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n            ctx.restore();\n\n            x += barWidth + 5;\n\n            if (x > canvas.width/2)\n            {\n                x = 0;\n                break;\n            }\n        }\n        \n        requestAnimationFrame(animateFullRainbowBar);\n    }\n    animateFullRainbowBar();\n}\n\nexport function audioVisualizer()\n{\n    const canvas = document.getElementById(`header-canvas`);\n    const ctx = canvas.getContext(`2d`);\n    console.log(canvas);\n    console.log(\"hellow\");\n\n    const audioCtx = new AudioContext();\n    const analyser = audioCtx.createAnalyser();\n    const audio = new Audio(`../ext_song.mp3`);\n    const audioSource = audioCtx.createMediaElementSource(audio);\n    audioSource.connect(analyser);\n\n    analyser.fftSize = 1024;\n\n    const bufferLen = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLen);\n\n    function animateFullRainbowBar() {\n\n        if (audio.paused)\n        {\n            audio.play();\n        }\n\n        const barWidth = canvas.width / bufferLen;\n        let barHeight;\n        let x = 0;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        analyser.getByteFrequencyData(dataArray);\n\n        for (let i = 0; i < bufferLen; i++)\n        {\n            barHeight = dataArray[i] * 2;\n\n            const hue = i * 10;\n            \n            ctx.fillStyle = `hsl(` + hue + `,100%, 50%)`;\n\n            // let red = 100;\n            // let blue = barHeight + 30;\n            // let green = barHeight + 50;\n\n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n            ctx.save();\n            ctx.translate(canvas.width, 0);\n            ctx.scale(-1, 1);   \n            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n            ctx.restore();\n\n            x += barWidth + 5;\n\n            if (x > canvas.width/2)\n            {\n                x = 0;\n                break;\n            }\n        }\n        \n        requestAnimationFrame(animateFullRainbowBar);\n    }\n\n    audio.play();\n    animateFullRainbowBar();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}