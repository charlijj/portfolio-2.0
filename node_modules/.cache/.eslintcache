[{"/home/charlijj/home/portfolio-2.0/src/index.js":"1","/home/charlijj/home/portfolio-2.0/src/App.js":"2","/home/charlijj/home/portfolio-2.0/src/section_script/sectionScripts.js":"3","/home/charlijj/home/portfolio-2.0/src/section_script/game.js":"4"},{"size":354,"mtime":1707535024335,"results":"5","hashOfConfig":"6"},{"size":8774,"mtime":1707613491431,"results":"7","hashOfConfig":"6"},{"size":34991,"mtime":1707613663041,"results":"8","hashOfConfig":"6"},{"size":11370,"mtime":1707597727083,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1ih84h8",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":5,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/home/charlijj/home/portfolio-2.0/src/index.js",[],[],[],"/home/charlijj/home/portfolio-2.0/src/App.js",["26","27","28","29","30","31","32","33","34","35","36","37","38"],[],"import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport './game.css';\nimport { moveCircles, headerTitle, tableOfContents, aboutMe, projects, sortBy, checkSort, addModels } from './section_script/sectionScripts.js';\nimport { run_game } from \"./section_script/game\";\n\nfunction App() {\n\n  useEffect(() => {\n    headerTitle();\n    moveCircles();\n    addModels();\n\n    window.addEventListener('scroll', handleScroll);\n    const theme = window.localStorage.getItem(\"theme\");\n    if (theme === \"light\")\n    {\n      document.body.id = \"darkBody\";\n      themeChange();\n    }\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n\n\n  const themeChange = () => {\n\n    const BODY = document.body;\n    const THEME_IMG = document.getElementById(\"themeImage\");\n    const THEME_LABEL = document.getElementById(\"themeLabel\");\n    let bodyID = BODY.id;\n    console.log(THEME_IMG.src)\n\n    if (bodyID == \"body\")\n    {\n      BODY.id = \"darkBody\";\n      THEME_IMG.src = process.env.PUBLIC_URL + \"/img/light-mode.png\";\n      THEME_LABEL.innerHTML = \"GO LIGHT\";\n      window.localStorage.setItem(\"theme\", \"dark\");\n    }\n    else\n    {\n      BODY.id = \"body\";\n      THEME_IMG.src = process.env.PUBLIC_URL + \"/img/dark-mode.png\";\n      THEME_LABEL.innerHTML = \"GO DARK\";\n      window.localStorage.setItem(\"theme\", \"light\");\n    }\n  }\n\n  const handleScroll = () => {\n    if (document.querySelector(\".App-header\").getBoundingClientRect().top < 0) {\n      tableOfContents();\n      aboutMe();\n    }\n\n    const abtmeRect = document.querySelector(\".App-about-me\").getBoundingClientRect();\n    const gameRect = document.querySelector(\".App-game\").getBoundingClientRect();\n\n    if (window.innerWidth > 1280 && gameRect.top < -gameRect.height / 2) {\n      projects();\n    }\n    else if (window.innerWidth < 1280 && abtmeRect.bottom < 100)\n    {\n      projects();\n    }\n  }\n\n  const gameCanvasStyle = {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/img/game/background.gif)`,\n  };\n  const startStopGame = () => {\n\n    const startStopButton = document.getElementById(\"gameStartStopButton\");\n  \n    if (startStopButton.value == \"Start\")\n    {\n      run_game(true);\n    }\n    else\n    {\n      run_game(false)\n    }\n  }\n\n  const [checkedBoxes, setCheckedBoxes] = useState({\n    \"C++\": true,\n    \"Python\": true,\n    \"JavaScript\": true,\n    \"HTML/CSS\": true,\n    \"Bash\": true,\n    \"Racket\": true,\n    \"WordPress\": true,\n    \"PHP\": true,\n    \"SQL\": true\n  });\n  \n  const handleCheckboxChange = (event) => {\n    const checkboxName = event.target.name;\n    const isChecked = event.target.checked;\n    setCheckedBoxes({\n      ...checkedBoxes,\n      [checkboxName]: isChecked\n    });\n\n    checkSort(checkboxName);\n  }\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"theme-button-container\">\n        <p className=\"theme-label\" id=\"themeLabel\">Go Light</p>\n        <div className=\"theme-button\" id=\"themeButton\" onClick={themeChange}>\n          <img src={process.env.PUBLIC_URL + \"/img/dark-mode.png\"} alt=\"dark mode\" id=\"themeImage\"></img>\n        </div>\n      </div>\n\n      <a id=\"top\"></a>\n      <header className=\"App-header\">\n        <div className=\"circle small\"></div>\n        <div className=\"circle small\"></div>\n        <div className=\"circle small\"></div>\n        <div className=\"circle small\"></div>\n        <div className=\"circle medium\"></div>\n        <div className=\"circle medium\"></div>\n        <div className=\"circle medium\"></div>\n        <div className=\"circle medium\"></div>\n        <div className=\"circle large\"></div>\n        <div className=\"circle large\"></div>\n        <div className=\"circle large\"></div>\n        <div className=\"circle large\"></div>\n        <canvas id=\"header-canvas\"></canvas>\n      </header>\n      <div className=\"App-table-of-contents\">\n        <canvas id=\"table-of-contents-canvas\"></canvas>\n      </div>\n      <a id=\"AboutMe\"></a>\n      <div className=\"App-about-me\">\n        <canvas id=\"about-me-canvas\"></canvas>\n      </div>\n\n      <div className=\"App-game\">\n        <div id=\"gameNavBar\">\n          <input type=\"button\" id=\"gameStartStopButton\" value=\"Start\" readOnly onClick={startStopGame}/>\n          <div className=\"game-header\"><p>Asteroid Field</p></div>\n          <input type=\"text\" value=\"0\" id=\"scoreDisplay\" readOnly/>\n        </div>\n        <div id=\"gameMenu\">\n          <p>Press the Start Button to Play</p>\n          <div className=\"line\"></div>\n          <p id=\"gamePrevScore\">Your Score: {window.localStorage.getItem(\"prevScore\")}</p>\n          <p id=\"gameHighScore\">High Score: {window.localStorage.getItem(\"highScore\")}</p>\n          <p className=\"game-controls\">Move with WASD or Arrow Keys</p>\n        </div>\n        <canvas id=\"game-canvas\" style={gameCanvasStyle}></canvas>\n      </div>\n      <div className=\"line\"></div>\n      <a id=\"Projects\"></a>\n      <div className=\"App-projects\">\n        <canvas id=\"projects-canvas\"></canvas>\n        <div className=\"App-projects-select-container\" id=\"App-projects-select-container\">\n          <div className=\"App-projects-select-container-nav\" id=\"projects-nav\">\n            <label></label>Sort By: \n            <select name=\"sortby\" id=\"sortby\" className='App-projects-select-container-nav-select' onChange={sortBy}>\n              <option value=\"best\">Best</option>\n              <option value=\"new\">Date - New</option>\n              <option value=\"old\">Date - Old</option>\n            </select>\n            <div id=\"languageOptions\" className=\"animate-in checkbox-wrapper-13\">\n              <label>\n              <input type=\"checkbox\" name=\"C++\" id='C++' checked={checkedBoxes[\"C++\"]} onChange={handleCheckboxChange} />\n              C++\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"Python\" id='Python' checked={checkedBoxes[\"Python\"]} onChange={handleCheckboxChange} />\n                Python\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"JavaScript\" id='JavaScript' checked={checkedBoxes[\"JavaScript\"]} onChange={handleCheckboxChange} />\n                JavaScript\n              </label>\n              <br />\n              <label>\n                <input type=\"checkbox\" name=\"HTML/CSS\" id='HTML/CSS' checked={checkedBoxes[\"HTML/CSS\"]} onChange={handleCheckboxChange} />\n                HTML/CSS\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"Bash\" id=\"Bash\" checked={checkedBoxes[\"Bash\"]} onChange={handleCheckboxChange} />\n                Bash\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"Racket\" id=\"Racket\" checked={checkedBoxes[\"Racket\"]} onChange={handleCheckboxChange} />\n                Racket\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"PHP\" id=\"PHP\" checked={checkedBoxes[\"PHP\"]} onChange={handleCheckboxChange} />\n                PHP\n              </label>\n              <label>\n                <input type=\"checkbox\" name=\"SQL\" id=\"SQL\" checked={checkedBoxes[\"SQL\"]} onChange={handleCheckboxChange} />\n                SQL\n              </label>\n            </div>\n          </div>\n        </div>\n        <div id=\"modalContainer\"></div>\n      </div>\n      <footer className=\"footer\" id=\"footer\">\n        <div className=\"footer-link-container\">\n          <p>Connect with me on Linkedin! : </p>\n          <a href=\"https://www.linkedin.com/in/jasper-charlinski-02ab41238\" target=\"_blank\">&nbsp;Jasper Charlinski</a>\n          <a href=\"https://www.linkedin.com/in/jasper-charlinski-02ab41238\" target=\"_blank\"><img src={process.env.PUBLIC_URL + \"/img/linkedIn-Icon.png\"}alt=\"linkedin-icon\" className=\"footer-link-img\"></img></a>\n        </div>\n        <div className=\"footer-link-container\">\n          <p>Send me an Email to get in contact : </p>\n          <a href=\"mailto:jjcharlinski@gmail.com\">&nbsp;jjcharlinski@gmail.com</a>\n          <a href=\"mailto:jjcharlinski@gmail.com\"><img src={process.env.PUBLIC_URL + \"/img/mail-Icon.png\"}alt=\"email-icon\" className=\"footer-link-mail\"></img></a>\n        </div>\n        <div className=\"footer-link-container\">\n          <p>To see more of my projects visit my GitHub : </p>\n          <a href=\"https://github.com/charlijj\" target=\"_blank\">&nbsp;charlijj</a>\n          <a href=\"https://github.com/charlijj\" target=\"_blank\"><img src={process.env.PUBLIC_URL + \"/img/github-Icon.png\"}alt=\"github-icon\" className=\"footer-link-img\"></img></a>\n        </div>\n        <p>View <a href=\"https://github.com/charlijj/portfolio-2.0\" target=\"_blank\"><strong>source code</strong></a> for this website</p>\n        <p>Jasper Charlinski, Feb 10th 2024 &copy;</p>\n        <a href=\"#top\"><strong>TOP</strong></a>\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n",[],"/home/charlijj/home/portfolio-2.0/src/section_script/sectionScripts.js",["39","40","41"],[],"/home/charlijj/home/portfolio-2.0/src/section_script/game.js",["42"],[],"export function run_game(start) {\n  const startStopButton = document.getElementById(\"gameStartStopButton\");\n\n  if (window.innerWidth < 1200) {\n    load_game(false);\n    load_menu(false);\n  }\n  if (start) {\n    startStopButton.value = \"Stop\";\n    load_menu(false);\n    load_game(true);\n  } else {\n    startStopButton.value = \"Start\";\n    load_game(false);\n    load_menu(true);\n  }\n}\n\nfunction load_game(load) {\n  const mainCVS = document.getElementById(\"game-canvas\");\n  const score = document.getElementById(\"scoreDisplay\");\n  const ctx = mainCVS.getContext(\"2d\");\n  ctx.imageSmoothingEnabled = true;\n\n  class InputHandler {\n    constructor() {\n      this.keys = {};\n      window.addEventListener(\"keydown\", (event) => {\n        if (event.repeat) {\n          return;\n        }\n        if (\n          [\n            \"w\",\n            \"a\",\n            \"s\",\n            \"d\",\n            \"ArrowRight\",\n            \"ArrowLeft\",\n            \"ArrowUp\",\n            \"ArrowDown\",\n          ].includes(event.key) &&\n          !(event.key in this.keys)\n        ) {\n          this.keys[event.key] = true;\n        }\n      });\n      window.addEventListener(\"keyup\", (event) => {\n        if (event.key in this.keys) {\n          delete this.keys[event.key];\n        }\n      });\n    }\n  }\n\n  class Player {\n    constructor(gameWidth, gameHeight) {\n      this.playerImage = new Image();\n      this.playerImage.src = process.env.PUBLIC_URL + \"/img/game/spaceship.png\";\n      this.gameWidth = gameWidth;\n      this.gameHeight = gameHeight;\n      this.width = 33;\n      this.height = 33;\n      this.collisionBuffer = 5;\n      this.x = gameWidth / 2 - this.width / 2;\n      this.y = this.gameHeight - this.height * 2;\n      this.speed = 0;\n      this.yVelocity = 0;\n      this.acceleration = 3;\n    }\n\n    draw() {\n      ctx.drawImage(this.playerImage, this.x, this.y, this.width, this.height);\n    }\n\n    detectCollision(asteroid) {\n      // Calculate the radius of the asteroid\n      const asteroidRadius = asteroid.asteroidWidth / 2;\n    \n      // Calculate the center point of the asteroid\n      const asteroidCenterX = asteroid.asteroidX + asteroidRadius;\n      const asteroidCenterY = asteroid.asteroidY + asteroidRadius;\n    \n      // Calculate the coordinates of the center point of the player\n      const playerCenterX = this.x + this.width / 2;\n      const playerCenterY = this.y + this.height / 2;\n    \n      // Calculate the distance between the centers of the two objects\n      const distanceX = playerCenterX - asteroidCenterX;\n      const distanceY = playerCenterY - asteroidCenterY;\n      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n    \n      // Calculate the combined radius of the two objects\n      const combinedRadius = this.width / 2 + asteroidRadius;\n    \n      // Check if the distance between the centers of the two objects is less than the combined radius\n      if (distance < combinedRadius) {\n        return true;\n      }\n    \n      return false;\n    }\n\n    update(input) {\n      let horizontalMovement = 0;\n      let verticalMovement = 0;\n\n      if (input.keys[\"d\"] || input.keys[\"ArrowRight\"]) {\n        horizontalMovement += 1;\n      }\n      if (input.keys[\"a\"] || input.keys[\"ArrowLeft\"]) {\n        horizontalMovement -= 1;\n      }\n      if (input.keys[\"w\"] || input.keys[\"ArrowUp\"]) {\n        verticalMovement -= 1;\n      }\n      if (input.keys[\"s\"] || input.keys[\"ArrowDown\"]) {\n        verticalMovement += 1;\n      }\n\n      // Normalize diagonal movement\n      if (horizontalMovement !== 0 && verticalMovement !== 0) {\n        horizontalMovement /= Math.sqrt(2);\n        verticalMovement /= Math.sqrt(2);\n      }\n\n      this.x += horizontalMovement * this.acceleration;\n      this.y += verticalMovement * this.acceleration;\n\n      if (this.x < 0) {\n        this.x = 0;\n      }\n      if (this.x > this.gameWidth - this.width) {\n        this.x = this.gameWidth - this.width;\n      }\n      if (this.y < 0) {\n        this.y = 0;\n      }\n      if (this.y > this.gameHeight - this.height) {\n        this.y = this.gameHeight - this.height;\n      }\n    }\n  }\n\n  const AsteroidsImage = new Image();\n  AsteroidsImage.src = process.env.PUBLIC_URL + \"/img/game/asteroid.png\";\n\n  class AsteroidsCaller {\n    constructor(gameWidth, gameHeight) {\n      this.gameWidth = gameWidth;\n      this.gameHeight = gameHeight;\n\n      this.spawnTimeout = true;\n      this.spawnTimeoutDistance = 1000;\n\n\n\n      this.tinyAsteroidWidth = 18;\n      this.tinyAsteroidSpeed = 5;\n      this.tinyAsteroidReload = -200;\n      this.tinyAsteroid = null;\n\n      this.smallAsteroidWidth = 25;\n      this.smallAsteroidSpeed = 4;\n      this.smallAsteroidReload = -200;\n      this.smallAsteroid1 = null;\n      this.smallAsteroid2 = null;\n\n      this.medAsteroidWidth = 35;\n      this.medAsteroidSpeed = 3;\n      this.medAsteroidReload = -150;\n      this.medAsteroid1 = null;\n      this.medAsteroid2 = null;\n\n      this.bigAsteroidWidth = 50;\n      this.bigAsteroidSpeed = 2;\n      this.bigAsteroidReload = -100;\n      this.bigAsteroid1 = null;\n      this.bigAsteroid2 = null;\n\n      this.massiveAsteroidWidth = 70;\n      this.massiveAsteroidSpeed = 1.5;\n      this.massiveAsteroidReload = -200;\n      this.massiveAsteroid = null;\n\n      this.allAsteroids = [];\n    }\n\n    createAsteroids() {\n      // constructor(gameWidth, gameHeight, width, x, y, speed, reloadTime)\n      this.smallAsteroid1 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.smallAsteroidWidth,\n        0,\n        0,\n        this.smallAsteroidSpeed,\n        this.smallAsteroidReload\n      );\n      this.smallAsteroid2 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.smallAsteroidWidth,\n        0,\n        0,\n        this.smallAsteroidSpeed,\n        this.smallAsteroidReload\n      );\n      this.medAsteroid1 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.medAsteroidWidth,\n        0,\n        0,\n        this.medAsteroidSpeed,\n        this.medAsteroidReload\n      );\n      this.medAsteroid2 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.medAsteroidWidth,\n        0,\n        0,\n        this.medAsteroidSpeed,\n        this.medAsteroidReload\n      );\n      this.bigAsteroid1 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.bigAsteroidWidth,\n        0,\n        0,\n        this.bigAsteroidSpeed,\n        this.bigAsteroidReload\n      );\n\n      this.bigAsteroid2 = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.bigAsteroidWidth,\n        0,\n        0,\n        this.bigAsteroidSpeed,\n        this.bigAsteroidReload\n      );\n\n      this.massiveAsteroid = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.massiveAsteroidWidth,\n        0,\n        0,\n        this.massiveAsteroidSpeed,\n        this.massiveAsteroidReload\n      );\n      this.tinyAsteroid = new Asteroid(\n        this.gameWidth,\n        this.gameHeight,\n        this.tinyAsteroidWidth,\n        0,\n        0,\n        this.tinyAsteroidSpeed,\n        this.tinyAsteroidReload\n      );\n\n\n      this.allAsteroids = [\n        this.massiveAsteroid,\n        this.tinyAsteroid,\n        this.bigAsteroid1,\n        this.bigAsteroid2,\n        this.medAsteroid1,\n        this.medAsteroid2,\n        this.smallAsteroid1,\n        this.smallAsteroid2,\n      ];\n    }\n\n    draw() {\n      if (this.spawnTimeout) {\n        this.createAsteroids();\n\n        this.smallAsteroid1.asteroidY -=\n          this.smallAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.smallAsteroid2.asteroidY -=\n          this.smallAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.medAsteroid1.asteroidY -=\n          this.medAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.medAsteroid2.asteroidY -=\n          this.medAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.bigAsteroid1.asteroidY -=\n          this.bigAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.bigAsteroid2.asteroidY -=\n          this.bigAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n        this.massiveAsteroid.asteroidY -=\n          this.bigAsteroidReload -\n          Math.random() * 1000 -\n          this.spawnTimeoutDistance;\n\n        this.spawnTimeout = false;\n      }\n\n      this.smallAsteroid1.draw();\n      this.medAsteroid1.draw();\n      this.bigAsteroid1.draw();\n\n      if (score.value > 1000) {\n        this.smallAsteroid2.draw();\n        this.medAsteroid2.draw();\n        this.bigAsteroid2.draw();\n        this.massiveAsteroid.draw();\n        this.tinyAsteroid.draw();\n      }\n    }\n  }\n\n  class Asteroid {\n    constructor(gameWidth, gameHeight, width, x, y, speed, reloadTime) {\n      this.gameWidth = gameWidth;\n      this.gameHeight = gameHeight;\n      this.asteroidWidth = width;\n      this.asteroidY = y;\n      this.asteroidX = x;\n      this.asteroidSpeed = speed;\n      this.reload = reloadTime;\n    }\n\n    draw() {\n      if (this.asteroidX == 0) {\n        this.asteroidX = Math.random() * this.gameWidth;\n\n        if (this.asteroidX < this.asteroidWidth) {\n          this.asteroidX = this.asteroidWidth;\n        } else if (this.asteroidX > this.gameWidth - this.asteroidWidth) {\n          this.asteroidX = this.gameWidth - this.asteroidWidth;\n        }\n      }\n\n      ctx.drawImage(\n        AsteroidsImage,\n        this.asteroidX,\n        this.asteroidY,\n        this.asteroidWidth,\n        this.asteroidWidth\n      );\n\n      this.asteroidY += this.asteroidSpeed;\n\n      if (this.asteroidY > this.gameHeight) {\n        this.asteroidY = this.reload - Math.random() * 1000;\n        this.asteroidX = 0;\n      }\n    }\n  }\n\n  if (load) {\n    const input = new InputHandler();\n    const player = new Player(mainCVS.width, mainCVS.height);\n    const asteroids = new AsteroidsCaller(mainCVS.width, mainCVS.height);\n\n    function animate() {\n      ctx.clearRect(0, 0, mainCVS.width, mainCVS.height);\n      player.draw(ctx, null);\n      player.update(input);\n      asteroids.draw(ctx, player);\n\n      for (const asteroid of asteroids.allAsteroids) {\n        if (player.detectCollision(asteroid)) {\n          cancelAnimationFrame(animate);\n          end_game(score.value);\n          break;\n        }\n      }\n\n      score.value++;\n\n      requestAnimationFrame(animate);\n    }\n    animate();\n  } else {\n    end_game(score.value);\n    return;\n  }\n\n  function end_game(score) {\n    window.localStorage.setItem(\"prevScore\", score);\n\n    if (!window.localStorage.getItem(\"highScore\")) {\n      window.localStorage.setItem(\"highScore\", \"0\");\n    }\n\n    let highScore = parseInt(window.localStorage.getItem(\"highScore\"));\n    score = parseInt(score);\n\n    if (score > highScore) {\n      window.localStorage.setItem(\"highScore\", score);\n    }\n\n    ctx.clearRect(0, 0, mainCVS.width, mainCVS.height);\n\n    let url = window.location.href.split('#')[0];\n    window.history.replaceState({}, document.title, url);\n    window.location.reload();\n    return;\n  }\n}\n\nfunction load_menu(load) {\n  const menu = document.getElementById(\"gameMenu\");\n\n  if (load) {\n    menu.style.opacity = \"1\";\n  } else {\n    menu.style.opacity = \"0\";\n  }\n}\n",{"ruleId":"43","severity":1,"message":"44","line":36,"column":16,"nodeType":"45","messageId":"46","endLine":36,"endColumn":18},{"ruleId":"43","severity":1,"message":"44","line":77,"column":31,"nodeType":"45","messageId":"46","endLine":77,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":120,"column":7,"nodeType":"49","endLine":120,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":120,"column":7,"nodeType":"49","endLine":120,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":139,"column":7,"nodeType":"49","endLine":139,"endColumn":23},{"ruleId":"50","severity":1,"message":"51","line":139,"column":7,"nodeType":"49","endLine":139,"endColumn":23},{"ruleId":"47","severity":1,"message":"48","line":160,"column":7,"nodeType":"49","endLine":160,"endColumn":24},{"ruleId":"50","severity":1,"message":"51","line":160,"column":7,"nodeType":"49","endLine":160,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":213,"column":11,"nodeType":"49","messageId":"54","endLine":213,"endColumn":93,"fix":"55"},{"ruleId":"52","severity":1,"message":"53","line":214,"column":11,"nodeType":"49","messageId":"54","endLine":214,"endColumn":93,"fix":"56"},{"ruleId":"52","severity":1,"message":"53","line":223,"column":11,"nodeType":"49","messageId":"54","endLine":223,"endColumn":65,"fix":"57"},{"ruleId":"52","severity":1,"message":"53","line":224,"column":11,"nodeType":"49","messageId":"54","endLine":224,"endColumn":65,"fix":"58"},{"ruleId":"52","severity":1,"message":"53","line":226,"column":17,"nodeType":"49","messageId":"54","endLine":226,"endColumn":85,"fix":"59"},{"ruleId":"43","severity":1,"message":"44","line":593,"column":20,"nodeType":"45","messageId":"46","endLine":593,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":597,"column":20,"nodeType":"45","messageId":"46","endLine":597,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":601,"column":20,"nodeType":"45","messageId":"46","endLine":601,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":341,"column":26,"nodeType":"45","messageId":"46","endLine":341,"endColumn":28},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"60","text":"61"},{"range":"62","text":"61"},{"range":"63","text":"61"},{"range":"64","text":"61"},{"range":"65","text":"61"},[7469,7469]," rel=\"noreferrer\"",[7589,7589],[8262,8262],[8345,8345],[8559,8559]]